name: "CI - Stage 1 - Build and Test (.NET Microservice)"

on:
  push:
    branches:
      - main
      - develop
      - "feature/**"
      - "release/**"
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    name: üìê Setup Environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"
          cache: true

      - name: Restore Dependencies
        run: dotnet restore

  lint:
    name: üîç Static Code Analysis (dotnet format)
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"
          cache: true
      - run: dotnet format --verify-no-changes --severity error

  unit-test:
    name: üß™ Run Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"
          cache: true
      - name: Restore dependencies
        run: dotnet restore
      - name: Run tests with coverage
        run: dotnet test --configuration Release --no-restore --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./TestResults
      - uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: "**/TestResults/"
          retention-days: 7
      - name: Generate code coverage report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.2.0
        with:
          reports: '**/TestResults/**/coverage.cobertura.xml'
          targetdir: 'coveragereport'
          reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges'
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coveragereport
          retention-days: 7

  build:
    name: üèóÔ∏è Build Microservice
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"
          cache: true
      - run: dotnet build --no-restore --configuration Release
      - uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            **/bin/Release/
          retention-days: 1

  security-scan:
    name: üß™ Security Scan with dotnet list package
    runs-on: ubuntu-latest
    needs: [lint, unit-test, build]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"
          cache: true
      - run: dotnet list package --vulnerable --include-transitive > security-report.txt || true
      - run: cat security-report.txt
      - name: Check for high severity vulnerabilities
        run: |
          if grep -i "Severity.*High\|Severity.*Critical" security-report.txt; then
            echo "‚ö†Ô∏è High or Critical severity vulnerabilities detected"
            # Uncomment line below to fail the pipeline on severe vulnerabilities
            # exit 1
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.txt
          retention-days: 7

  sonar:
    name: ‚ò¢Ô∏è SonarQube Analysis
    runs-on: ubuntu-latest
    needs: security-scan
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'pull_request' && (github.base_ref == 'main' || github.base_ref == 'develop')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"
          cache: true

      - name: Install SonarScanner
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Begin SonarQube Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner begin \
          /k:"${{ secrets.SONAR_PROJECT_KEY }}" \
          /o:"${{ secrets.SONAR_ORGANIZATION }}" \
          /d:sonar.host.url="https://sonarcloud.io" \
          /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.cobertura.xml" \
          /d:sonar.coverage.exclusions="**Tests.cs,**/Program.cs" \
          /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      - name: Restore and build
        run: |
          dotnet restore
          dotnet build --no-incremental --configuration Release

      - name: Run tests
        run: dotnet test --no-build --collect:"XPlat Code Coverage" --configuration Release

      - name: End SonarQube Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
